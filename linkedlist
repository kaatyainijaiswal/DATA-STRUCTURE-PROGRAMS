#include<stdio.h>
#include<stdlib.h>
void push();
void pop();
void display();
  int main()
    {
     int choice;
      while(1)
       {
          printf("operation performed by stack\n");
          printf(" 1 push\n");
          printf("2 pop\n");
          printf("3 display\n");
          printf(" 4 exit \n");
          scanf("%d", &choice);
            switch(choice)
             {
              case 1: push();
              break;
              case 2: pop();
              break;
              case 3: display();
              break;
              case 4: exit(0);
              default: printf("invalid operation\n");
             }
       }
   }
      struct node
         {
          int val;
          struct node *next;
         };
      struct node *head;
           void push()
            {
             int val;
             struct node *ptr=(struct node *)malloc(sizeof(struct node));
             if(ptr==NULL)
             {
              printf("not able to push the element\n");
             }
             else 
            {
             printf("enter the value\n");
             scanf("%d",&val);
            if(head==NULL)
            {
             ptr->val=val;
             ptr->next=head;
             head=ptr;
            }
             printf("item pushed\n");
            }
           }
         void pop()
          {
           int item;
           struct node *ptr;
           if(head==NULL)
           {
            printf("underflow");
           }
           else 
           {
            item=head->val;
            ptr=head;
            head=head->next;
            free(ptr);
            printf("item popped\n");
           }
          }
        void display()
         {
           int i;
           struct node *ptr;
           ptr=head;
           if(ptr==NULL)
            {
             printf("stack is empty\n");
            }
           else
            {
             printf("printing stack elements\n");
             while(ptr!=NULL)
             {
              printf("%d\n",ptr->val);
              ptr=ptr->next;
             }
            }
          }
